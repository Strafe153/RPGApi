// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(RPGContext))]
    partial class RPGContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Health")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Race")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Core.Entities.CharacterMount", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("MountId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "MountId");

                    b.HasIndex("MountId");

                    b.ToTable("CharacterMounts", (string)null);
                });

            modelBuilder.Entity("Core.Entities.CharacterSpell", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "SpellId");

                    b.HasIndex("SpellId");

                    b.ToTable("CharacterSpells", (string)null);
                });

            modelBuilder.Entity("Core.Entities.CharacterWeapon", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "WeaponId");

                    b.HasIndex("WeaponId");

                    b.ToTable("CharacterWeapons", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Mount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Speed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Mounts");
                });

            modelBuilder.Entity("Core.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            PasswordHash = new byte[] { 85, 231, 233, 62, 74, 123, 216, 86, 236, 143, 206, 171, 38, 166, 172, 188, 140, 4, 18, 183, 101, 135, 207, 17, 121, 243, 150, 75, 100, 91, 103, 147, 46, 13, 72, 170, 115, 104, 182, 74, 122, 3, 73, 98, 137, 41, 10, 143, 166, 201, 156, 20, 164, 246, 119, 91, 126, 6, 163, 185, 51, 70, 252, 95 },
                            PasswordSalt = new byte[] { 213, 144, 108, 126, 63, 226, 53, 28, 69, 97, 132, 35, 230, 149, 184, 102, 185, 103, 146, 148, 35, 216, 144, 10, 206, 153, 168, 152, 11, 157, 102, 157, 46, 239, 139, 62, 182, 80, 13, 152, 130, 248, 43, 25, 131, 103, 86, 186, 27, 96, 194, 44, 5, 219, 158, 21, 115, 135, 190, 116, 234, 146, 99, 84, 250, 185, 69, 178, 37, 161, 159, 146, 127, 10, 118, 63, 74, 167, 106, 193, 203, 174, 145, 49, 208, 100, 141, 185, 23, 6, 236, 216, 252, 12, 112, 192, 40, 58, 74, 222, 21, 236, 14, 135, 212, 242, 35, 251, 143, 55, 86, 117, 200, 206, 182, 217, 245, 9, 54, 60, 2, 133, 18, 33, 109, 18, 154, 249 },
                            Role = 0
                        });
                });

            modelBuilder.Entity("Core.Entities.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Damage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("Core.Entities.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Damage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("Core.Entities.Character", b =>
                {
                    b.HasOne("Core.Entities.Player", "Player")
                        .WithMany("Characters")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Core.Entities.CharacterMount", b =>
                {
                    b.HasOne("Core.Entities.Character", "Character")
                        .WithMany("CharacterMounts")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Mount", "Mount")
                        .WithMany("CharacterMounts")
                        .HasForeignKey("MountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Mount");
                });

            modelBuilder.Entity("Core.Entities.CharacterSpell", b =>
                {
                    b.HasOne("Core.Entities.Character", "Character")
                        .WithMany("CharacterSpells")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Spell", "Spell")
                        .WithMany("CharacterSpells")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Core.Entities.CharacterWeapon", b =>
                {
                    b.HasOne("Core.Entities.Character", "Character")
                        .WithMany("CharacterWeapons")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Weapon", "Weapon")
                        .WithMany("CharacterWeapons")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Core.Entities.Character", b =>
                {
                    b.Navigation("CharacterMounts");

                    b.Navigation("CharacterSpells");

                    b.Navigation("CharacterWeapons");
                });

            modelBuilder.Entity("Core.Entities.Mount", b =>
                {
                    b.Navigation("CharacterMounts");
                });

            modelBuilder.Entity("Core.Entities.Player", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Core.Entities.Spell", b =>
                {
                    b.Navigation("CharacterSpells");
                });

            modelBuilder.Entity("Core.Entities.Weapon", b =>
                {
                    b.Navigation("CharacterWeapons");
                });
#pragma warning restore 612, 618
        }
    }
}
