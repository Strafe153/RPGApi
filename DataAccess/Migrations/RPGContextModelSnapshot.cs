// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(RPGContext))]
    partial class RPGContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Health")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("Race")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Core.Entities.CharacterMount", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("MountId")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId", "MountId");

                    b.HasIndex("MountId");

                    b.ToTable("CharacterMounts", (string)null);
                });

            modelBuilder.Entity("Core.Entities.CharacterSpell", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("SpellId")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId", "SpellId");

                    b.HasIndex("SpellId");

                    b.ToTable("CharacterSpells", (string)null);
                });

            modelBuilder.Entity("Core.Entities.CharacterWeapon", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("WeaponId")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId", "WeaponId");

                    b.HasIndex("WeaponId");

                    b.ToTable("CharacterWeapons", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Mount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Speed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Mounts");
                });

            modelBuilder.Entity("Core.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            PasswordHash = new byte[] { 9, 120, 127, 51, 27, 108, 190, 9, 20, 179, 239, 173, 120, 56, 255, 157, 255, 2, 224, 17, 136, 60, 71, 53, 225, 87, 158, 28, 140, 146, 177, 32, 13, 14, 9, 163, 213, 161, 126, 162, 86, 90, 92, 173, 222, 88, 217, 73, 116, 242, 253, 172, 53, 137, 210, 55, 139, 55, 151, 187, 204, 190, 171, 254 },
                            PasswordSalt = new byte[] { 77, 193, 173, 203, 172, 178, 13, 242, 10, 121, 20, 158, 230, 208, 201, 248, 29, 131, 135, 220, 6, 121, 191, 175, 114, 230, 103, 173, 10, 30, 41, 161, 154, 28, 45, 118, 164, 213, 146, 107, 14, 130, 167, 143, 74, 40, 174, 47, 75, 110, 163, 31, 25, 74, 72, 39, 122, 70, 24, 190, 11, 21, 17, 28, 132, 77, 19, 62, 150, 86, 121, 32, 169, 51, 251, 249, 129, 237, 56, 11, 153, 161, 176, 65, 10, 112, 226, 5, 109, 32, 167, 249, 10, 226, 216, 251, 38, 25, 105, 45, 103, 215, 57, 13, 220, 123, 198, 215, 54, 197, 204, 186, 246, 233, 235, 158, 199, 85, 136, 240, 92, 43, 74, 185, 116, 191, 97, 44 },
                            Role = 0
                        });
                });

            modelBuilder.Entity("Core.Entities.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Damage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("Core.Entities.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Damage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("Core.Entities.Character", b =>
                {
                    b.HasOne("Core.Entities.Player", "Player")
                        .WithMany("Characters")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Core.Entities.CharacterMount", b =>
                {
                    b.HasOne("Core.Entities.Character", "Character")
                        .WithMany("CharacterMounts")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Mount", "Mount")
                        .WithMany("CharacterMounts")
                        .HasForeignKey("MountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Mount");
                });

            modelBuilder.Entity("Core.Entities.CharacterSpell", b =>
                {
                    b.HasOne("Core.Entities.Character", "Character")
                        .WithMany("CharacterSpells")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Spell", "Spell")
                        .WithMany("CharacterSpells")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Core.Entities.CharacterWeapon", b =>
                {
                    b.HasOne("Core.Entities.Character", "Character")
                        .WithMany("CharacterWeapons")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Weapon", "Weapon")
                        .WithMany("CharacterWeapons")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Core.Entities.Character", b =>
                {
                    b.Navigation("CharacterMounts");

                    b.Navigation("CharacterSpells");

                    b.Navigation("CharacterWeapons");
                });

            modelBuilder.Entity("Core.Entities.Mount", b =>
                {
                    b.Navigation("CharacterMounts");
                });

            modelBuilder.Entity("Core.Entities.Player", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Core.Entities.Spell", b =>
                {
                    b.Navigation("CharacterSpells");
                });

            modelBuilder.Entity("Core.Entities.Weapon", b =>
                {
                    b.Navigation("CharacterWeapons");
                });
#pragma warning restore 612, 618
        }
    }
}
