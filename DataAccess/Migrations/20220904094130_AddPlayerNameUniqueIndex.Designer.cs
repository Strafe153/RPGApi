// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(RPGContext))]
    [Migration("20220904094130_AddPlayerNameUniqueIndex")]
    partial class AddPlayerNameUniqueIndex
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Health")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Race")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Core.Entities.CharacterMount", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("MountId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "MountId");

                    b.HasIndex("MountId");

                    b.ToTable("CharacterMounts", (string)null);
                });

            modelBuilder.Entity("Core.Entities.CharacterSpell", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "SpellId");

                    b.HasIndex("SpellId");

                    b.ToTable("CharacterSpells", (string)null);
                });

            modelBuilder.Entity("Core.Entities.CharacterWeapon", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "WeaponId");

                    b.HasIndex("WeaponId");

                    b.ToTable("CharacterWeapons", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Mount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Speed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Mounts");
                });

            modelBuilder.Entity("Core.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            PasswordHash = new byte[] { 157, 70, 166, 171, 37, 141, 86, 31, 175, 52, 250, 21, 244, 221, 16, 238, 253, 82, 140, 7, 35, 228, 209, 87, 79, 43, 187, 250, 207, 72, 159, 199, 119, 159, 4, 181, 52, 77, 12, 222, 247, 149, 24, 254, 69, 100, 104, 109, 71, 46, 255, 184, 175, 122, 241, 43, 212, 149, 11, 175, 152, 167, 132, 164 },
                            PasswordSalt = new byte[] { 93, 91, 233, 210, 117, 82, 187, 94, 138, 230, 107, 11, 52, 239, 3, 38, 199, 188, 107, 192, 10, 57, 105, 153, 72, 195, 129, 133, 146, 39, 39, 11, 136, 198, 16, 66, 86, 157, 172, 70, 107, 90, 242, 50, 191, 48, 228, 9, 52, 116, 124, 76, 249, 122, 73, 138, 93, 143, 171, 68, 77, 143, 70, 108, 244, 15, 215, 38, 80, 74, 121, 156, 246, 54, 202, 41, 27, 239, 247, 206, 28, 5, 161, 38, 144, 227, 19, 58, 111, 181, 11, 66, 1, 7, 219, 89, 251, 142, 190, 200, 147, 205, 190, 7, 119, 234, 255, 178, 171, 77, 206, 136, 22, 195, 30, 107, 97, 212, 41, 219, 225, 12, 59, 126, 255, 29, 226, 226 },
                            Role = 0
                        });
                });

            modelBuilder.Entity("Core.Entities.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Damage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("Core.Entities.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Damage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("Core.Entities.Character", b =>
                {
                    b.HasOne("Core.Entities.Player", "Player")
                        .WithMany("Characters")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Core.Entities.CharacterMount", b =>
                {
                    b.HasOne("Core.Entities.Character", "Character")
                        .WithMany("CharacterMounts")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Mount", "Mount")
                        .WithMany("CharacterMounts")
                        .HasForeignKey("MountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Mount");
                });

            modelBuilder.Entity("Core.Entities.CharacterSpell", b =>
                {
                    b.HasOne("Core.Entities.Character", "Character")
                        .WithMany("CharacterSpells")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Spell", "Spell")
                        .WithMany("CharacterSpells")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Core.Entities.CharacterWeapon", b =>
                {
                    b.HasOne("Core.Entities.Character", "Character")
                        .WithMany("CharacterWeapons")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Weapon", "Weapon")
                        .WithMany("CharacterWeapons")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Core.Entities.Character", b =>
                {
                    b.Navigation("CharacterMounts");

                    b.Navigation("CharacterSpells");

                    b.Navigation("CharacterWeapons");
                });

            modelBuilder.Entity("Core.Entities.Mount", b =>
                {
                    b.Navigation("CharacterMounts");
                });

            modelBuilder.Entity("Core.Entities.Player", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Core.Entities.Spell", b =>
                {
                    b.Navigation("CharacterSpells");
                });

            modelBuilder.Entity("Core.Entities.Weapon", b =>
                {
                    b.Navigation("CharacterWeapons");
                });
#pragma warning restore 612, 618
        }
    }
}
